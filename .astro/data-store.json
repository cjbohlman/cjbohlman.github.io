[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.0.3","config-digest","e75bb6b8ecaf1a6c","posts",["Map",9,10,53,54],"post-2",{"id":9,"data":11,"body":21,"filePath":22,"digest":23,"rendered":24,"legacyId":52},{"title":12,"pubDate":13,"description":14,"author":15,"tags":16},"Certified Ethical Hacking Certification: You Should Probably Reconsider",["Date","2024-01-08T00:00:00.000Z"],"Taking about my experience with the Certified Ethical Hacking certification from EC-Council","cjbohlman",[17,18,19,20],"CEH","cybersecurity","hacking","certification","## Background\r\n\r\nWhen ChatGPT started gaining traction last year, I experienced a mini-crisis and decided to partially transition into cybersecurity to protect myself against potential AI coding overlords. While I possessed coding competency, I believed that the security field would offer greater resistance against the proliferation of Large Language Models (LLMs) in software. Given my enjoyable experience with a computer security class in college, it felt like a good decision at the time.\r\n\r\nAnd indeed, it was! As I delved into learning concepts in my Certified Ethical Hacker (CEH) course via EC-Council, I found immense enjoyment in expanding my knowledge and perspectives. However, I should have conducted more thorough research when choosing which certification to pursue.\r\n\r\n## Course Overview\r\n\r\nThe initial test for the CEH exam involves a 120-question multiple-choice examination. To prepare for this, EC-Council provides a hefty 3000-page textbook along with densely informative labs. All the information covered is potentially fair game for the exam, so it is in your best interest to absorb as much as possible.\r\n\r\nI completed the readings and labs within approximately 2 months. Subsequently, I engaged with the exam preparation module to prepare for the test. I soon realized that my notes were inadequate, and my initial approach to the course pass-through was flawed. It took an additional 4 months of index card studying to finally pass the exam.\r\n\r\n## The Cracks Start Appearing\r\n\r\nThere's no avoiding this: the information seemed quite outdated to me. Despite undergoing 11 revisions, EC-Council failed to emphasize modern hacking concepts and tools adequately. Instead, they seemed content with explaining hacking methodologies that were relevant 20 years ago, with only fleeting references to modern protocols.\r\n\r\nConsider NetBIOS, for instance. Is it valuable for hackers to understand this outdated protocol? Yes, but the excessive emphasis on it highlights EC-Council's lackadaisical approach to revising and modernizing their course materials.\r\n\r\nThe exam questions often delve into highly specific areas, testing your knowledge of tool functionalities, command-line arguments for cybersecurity software, steps in hacking processes, and general knowledge of tools like nmap. My written notes proved insufficient to memorize all this information; I resorted to using flashcards. Thankfully, Anki, which I used previously to memorize GMAT-related content, served me well in this endeavor. I went through the entire book again to discern which pieces of information could potentially appear on the test (my index cards are publicly available [here](https://github.com/cjbohlman/cehv12-index-cards)).\r\n\r\nUltimately, the first part of the CEH exam tests information recall. This method doesn't effectively test knowledge, but I managed to navigate it using spaced repetition.\r\n\r\n### A Sidebar on the Exam Prep Website\r\n\r\nI have to admit that the CyberQuotient test prep site is terrible. The explanations provided for correct/incorrect answers are vague at best and missing/incorrect at worst. Navigating the site is challenging, and it lacks a feature to compile questions for study purposes (which would be extremely useful, considering the module questions rotate).\r\n\r\n## The Labs\r\n\r\nWhile the labs are interesting, the information presented within them is not easily digestible. On several occasions, I found myself stuck and had to refer back to the instructional videos provided by EC-Council. However, these videos merely required replication of on-screen actions rather than genuine learning and application of concepts. It felt akin to following a \"Simon Says\" routine.\r\n\r\n## My Results\r\n\r\nSo, how did I fare? Well, I scored 67% on my first attempt (a failing grade), then dedicated 3 more months to studying my flashcards, eventually passing with a 77% on my second attempt (after paying a $100 exam retake fee, naturally). I probably could have organized my study routine better, but my learning habits were fragmented at best. The second time around, I honestly had luck with easier questions. But you know what they call someone who barely passes the CEH exam? A hacker... or a sucker.\r\n\r\n## Conclusion\r\n\r\nIf you search for 'Is CEH worth it?', you'll encounter numerous opinions discouraging it and instead recommending CompTIA Security+. Although I haven't taken a CompTIA course myself, I feel confident aligning myself with that perspective. Spare yourself the frustration of dealing with outdated materials and lessons. Don't repeat my mistakes.\r\n\r\nNevertheless, I plan to attempt the CEH practical exam since I have a free exam voucher. Wish me luck!\r\n\r\nLLMs were used to spell and grammar check this blog post.","src/content/posts/post-2.md","1174121d1c13bdca",{"html":25,"metadata":26},"\u003Ch2 id=\"background\">Background\u003C/h2>\n\u003Cp>When ChatGPT started gaining traction last year, I experienced a mini-crisis and decided to partially transition into cybersecurity to protect myself against potential AI coding overlords. While I possessed coding competency, I believed that the security field would offer greater resistance against the proliferation of Large Language Models (LLMs) in software. Given my enjoyable experience with a computer security class in college, it felt like a good decision at the time.\u003C/p>\n\u003Cp>And indeed, it was! As I delved into learning concepts in my Certified Ethical Hacker (CEH) course via EC-Council, I found immense enjoyment in expanding my knowledge and perspectives. However, I should have conducted more thorough research when choosing which certification to pursue.\u003C/p>\n\u003Ch2 id=\"course-overview\">Course Overview\u003C/h2>\n\u003Cp>The initial test for the CEH exam involves a 120-question multiple-choice examination. To prepare for this, EC-Council provides a hefty 3000-page textbook along with densely informative labs. All the information covered is potentially fair game for the exam, so it is in your best interest to absorb as much as possible.\u003C/p>\n\u003Cp>I completed the readings and labs within approximately 2 months. Subsequently, I engaged with the exam preparation module to prepare for the test. I soon realized that my notes were inadequate, and my initial approach to the course pass-through was flawed. It took an additional 4 months of index card studying to finally pass the exam.\u003C/p>\n\u003Ch2 id=\"the-cracks-start-appearing\">The Cracks Start Appearing\u003C/h2>\n\u003Cp>There’s no avoiding this: the information seemed quite outdated to me. Despite undergoing 11 revisions, EC-Council failed to emphasize modern hacking concepts and tools adequately. Instead, they seemed content with explaining hacking methodologies that were relevant 20 years ago, with only fleeting references to modern protocols.\u003C/p>\n\u003Cp>Consider NetBIOS, for instance. Is it valuable for hackers to understand this outdated protocol? Yes, but the excessive emphasis on it highlights EC-Council’s lackadaisical approach to revising and modernizing their course materials.\u003C/p>\n\u003Cp>The exam questions often delve into highly specific areas, testing your knowledge of tool functionalities, command-line arguments for cybersecurity software, steps in hacking processes, and general knowledge of tools like nmap. My written notes proved insufficient to memorize all this information; I resorted to using flashcards. Thankfully, Anki, which I used previously to memorize GMAT-related content, served me well in this endeavor. I went through the entire book again to discern which pieces of information could potentially appear on the test (my index cards are publicly available \u003Ca href=\"https://github.com/cjbohlman/cehv12-index-cards\">here\u003C/a>).\u003C/p>\n\u003Cp>Ultimately, the first part of the CEH exam tests information recall. This method doesn’t effectively test knowledge, but I managed to navigate it using spaced repetition.\u003C/p>\n\u003Ch3 id=\"a-sidebar-on-the-exam-prep-website\">A Sidebar on the Exam Prep Website\u003C/h3>\n\u003Cp>I have to admit that the CyberQuotient test prep site is terrible. The explanations provided for correct/incorrect answers are vague at best and missing/incorrect at worst. Navigating the site is challenging, and it lacks a feature to compile questions for study purposes (which would be extremely useful, considering the module questions rotate).\u003C/p>\n\u003Ch2 id=\"the-labs\">The Labs\u003C/h2>\n\u003Cp>While the labs are interesting, the information presented within them is not easily digestible. On several occasions, I found myself stuck and had to refer back to the instructional videos provided by EC-Council. However, these videos merely required replication of on-screen actions rather than genuine learning and application of concepts. It felt akin to following a “Simon Says” routine.\u003C/p>\n\u003Ch2 id=\"my-results\">My Results\u003C/h2>\n\u003Cp>So, how did I fare? Well, I scored 67% on my first attempt (a failing grade), then dedicated 3 more months to studying my flashcards, eventually passing with a 77% on my second attempt (after paying a $100 exam retake fee, naturally). I probably could have organized my study routine better, but my learning habits were fragmented at best. The second time around, I honestly had luck with easier questions. But you know what they call someone who barely passes the CEH exam? A hacker… or a sucker.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>If you search for ‘Is CEH worth it?’, you’ll encounter numerous opinions discouraging it and instead recommending CompTIA Security+. Although I haven’t taken a CompTIA course myself, I feel confident aligning myself with that perspective. Spare yourself the frustration of dealing with outdated materials and lessons. Don’t repeat my mistakes.\u003C/p>\n\u003Cp>Nevertheless, I plan to attempt the CEH practical exam since I have a free exam voucher. Wish me luck!\u003C/p>\n\u003Cp>LLMs were used to spell and grammar check this blog post.\u003C/p>",{"headings":27,"imagePaths":51,"frontmatter":11},[28,32,35,38,42,45,48],{"depth":29,"slug":30,"text":31},2,"background","Background",{"depth":29,"slug":33,"text":34},"course-overview","Course Overview",{"depth":29,"slug":36,"text":37},"the-cracks-start-appearing","The Cracks Start Appearing",{"depth":39,"slug":40,"text":41},3,"a-sidebar-on-the-exam-prep-website","A Sidebar on the Exam Prep Website",{"depth":29,"slug":43,"text":44},"the-labs","The Labs",{"depth":29,"slug":46,"text":47},"my-results","My Results",{"depth":29,"slug":49,"text":50},"conclusion","Conclusion",[],"post-2.md","post-1",{"id":53,"data":55,"body":63,"filePath":64,"digest":65,"rendered":66,"legacyId":88},{"title":56,"pubDate":57,"description":58,"author":15,"tags":59},"Implementing semaphores with the C threads.h library",["Date","2022-12-01T00:00:00.000Z"],"Implenting semaphores with the C11 threads.h library",[60,61,62],"C","parallel programming","learning in public","## Background\r\n\r\nThe C11 standard introduced a new optional threading library (threads.h) designed to be used instead of the POSIX threading libraries (pthreads).\r\n\r\nThis new library did not include a semaphore (sem_t) implementation. We can, however, build our own using the tools given to us in threads.h.\r\n\r\nThis guide assumes basic knowledge about multi-threading concepts (mutexes, semaphores, etc.)\r\n\r\n## Requirements\r\n\r\nTo be able to follow this guide, you must be using an implementation of the C standard that has adopted the usage of threads.h.\r\n\r\nTo check if your compiler supports this, the macro `__STDC_NO_THREADS__` was added for checking.\r\n\r\n```c\r\n#ifdef __STDC_NO_THREADS__\r\n#error This compiler does not support threads.h.\r\n#endif\r\n```\r\n\r\n## Units of Multi-threading: A Primer\r\n\r\nSemaphores are used for allowing a certain amount of threads to gain access to a resource at once. They differ from mutexes as semaphores can signal to other processes that they can attempt to access a critical section, whereas a mutex has to be unlocked by the same process/thread that locked it.\r\n\r\nthreads.h includes 2 locking mechanisms that can be used in tandem: mutexes and condition variables. The mutex is a binary semaphore, flipping between 1 and 0 to determine whether a thread can or can't access the section the mutex is guarding. The condition variables are used to tell threads to go to sleep when a certain event occurs, and to wake up when another event happens. And with just these 2 components, we can create a semaphore.\r\n\r\n## Implementation\r\n\r\nOur semaphore itself will have 3 variables.\r\n\r\n1. A counter, containing how many more threads are able to access the resource the semaphore is guarding\r\n2. A mutex, guarding access to the counter\r\n3. A conditional variable, used for the signaling of other threads that are using the semaphore.\r\n\r\n```c\r\ntypedef struct semaphore {\r\n  mtx_t mtx;\r\n  cnd_t cv;\r\n  int count;\r\n} sem_t;\r\n```\r\n\r\nThe semaphore functions we will implement mirror the POSIX semaphore functions with slightly less complexity.\r\n\r\n- `sem_init` will initialize the semaphore\r\n- `sem_ post` will indicate the thread is done with the semaphore so other threads can attepmt to unlock it\r\n- `sem_wait` will request to gain access to the critical section through the semaphore, putting the thread to sleep if the semaphore is full\r\n- `sem_destroy` will de-allocate the semaphore\r\n\r\n`sem_init` initializes the mutex and the conditional variable, as well as sets the counter to whatever is passed in the parameter.\r\n\r\n```c\r\nint sem_init(sem_t *sem, unsigned int value) {\r\n  if (sem == NULL) {\r\n    return -1;\r\n  }\r\n\r\n  mtx_init(&sem->mtx, mtx_plain);\r\n  cnd_init(&sem->cv);\r\n  sem->count = value;\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n`sem_wait` attempts to access the counter variable by blocking on the mutex. Once it obtains the mutex, the thread will block on the condition variable if the counter variable is equal to zero, meaning that no more space for resources is available. The conditional variable will take care of unlocking the mutex while the thread is asleep, so that the thread does not block other threads.\r\n\r\nOnce the thread wakes up and the counter is above zero, the thread will decrement the counter. It will unlock the mutex for the counter, and then return.\r\n\r\n```c\r\nint sem_wait(sem_t *sem) {\r\n  if (sem == NULL) {\r\n    return -1;\r\n  }\r\n\r\n  mtx_lock(&sem->mtx);\r\n  while (sem->count == 0) {\r\n    cnd_wait(&sem->cv, &sem->mtx);\r\n  }\r\n\r\n  sem->count--;\r\n\r\n  mtx_unlock(&sem->mtx);\r\n  return 0;\r\n}\r\n```\r\n\r\n`sem_post` does the opposite of `sem_wait`, locking the mutex and incrementing the counter. The conditional variable is then signaled, allowing another thread a chance at gaining access to the semaphore. The mutex is then unlocked and the function returns.\r\n\r\n```c\r\nint sem_post(sem_t *sem) {\r\n  if (sem == NULL) {\r\n    return -1;\r\n  }\r\n\r\n  mtx_lock(&sem->mtx);\r\n\r\n  sem->count++;\r\n\r\n  cnd_signal(&sem->cv);\r\n  mtx_unlock(&sem->mtx);\r\n  return 0;\r\n}\r\n```\r\n\r\n`sem_destroy` frees the mutex and the conditional variable such that no memory leaks will occur.\r\n\r\n```c\r\nint sem_destroy(sem_t *sem) {\r\n  if (sem == NULL) {\r\n    return -1;\r\n  }\r\n\r\n  mtx_destroy(&sem->mtx);\r\n  cnd_destroy(&sem->cv);\r\n  return 0;\r\n}\r\n```\r\n\r\n## Application\r\n\r\nThis sample code will attempt to give only VALUE_COUNT_MAX threads access to the critical section through the semaphore.\r\n\r\n```c\r\n#include \u003Cstdio.h>\r\n#include \u003Cunistd.h>\r\n#include \"semaphore.h\"\r\n\r\n#define VALUE_COUNT_MAX 5\r\n#define THREAD_COUNT 10\r\n\r\nsem_t sem;\r\n\r\nint run(void *arg)\r\n{\r\n    (void)arg;\r\n\r\n    sem_wait(&sem);\r\n    printf(\"Thread: is reading!\\n\");\r\n\r\n    sleep(2);\r\n\r\n    printf(\"Thread: is exiting!\\n\");\r\n    sem_post(&sem);\r\n\r\n    return 0;\r\n}\r\n\r\nint main(void)\r\n{\r\n    thrd_t t[10];\r\n\r\n    sem_init(&sem, VALUE_COUNT_MAX);\r\n\r\n    // Spawn new threads\r\n\r\n    int i;\r\n    for (i = 0; i \u003C THREAD_COUNT; i++) {\r\n      thrd_create(&t[i], run, NULL);\r\n    }\r\n\r\n    int res;\r\n    for (i = 0; i \u003C THREAD_COUNT; i++) {\r\n      thrd_join(t[i], &res);\r\n    }\r\n\r\n    sem_destroy(&sem);\r\n}\r\n```\r\n\r\n## Conclusion\r\n\r\nThis has been a very brief guide on implementing basic semaphores in C11. POSIX semaphores have many other options that can be mirrored with the threads.h library. Any suggestions are appreciated, thank you for your time!\r\n\r\n## Sources\r\n\r\n[Beej's C Programming guide](https://beej.us/guide/bgc/html/split/multithreading.html) was very helpful for explaining the capabilities of the threads.h library.\r\n\r\n[This GitHub repository](https://github.com/VladimirMarkelov/semaphore_c11) was helpful for verifying my implementation.","src/content/posts/post-1.md","bd642749ed7ec0bc",{"html":67,"metadata":68},"\u003Ch2 id=\"background\">Background\u003C/h2>\n\u003Cp>The C11 standard introduced a new optional threading library (threads.h) designed to be used instead of the POSIX threading libraries (pthreads).\u003C/p>\n\u003Cp>This new library did not include a semaphore (sem_t) implementation. We can, however, build our own using the tools given to us in threads.h.\u003C/p>\n\u003Cp>This guide assumes basic knowledge about multi-threading concepts (mutexes, semaphores, etc.)\u003C/p>\n\u003Ch2 id=\"requirements\">Requirements\u003C/h2>\n\u003Cp>To be able to follow this guide, you must be using an implementation of the C standard that has adopted the usage of threads.h.\u003C/p>\n\u003Cp>To check if your compiler supports this, the macro \u003Ccode>__STDC_NO_THREADS__\u003C/code> was added for checking.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#ifdef\u003C/span>\u003Cspan style=\"color:#B392F0\"> __STDC_NO_THREADS__\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#error\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> This compiler does not support threads.h.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#endif\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"units-of-multi-threading-a-primer\">Units of Multi-threading: A Primer\u003C/h2>\n\u003Cp>Semaphores are used for allowing a certain amount of threads to gain access to a resource at once. They differ from mutexes as semaphores can signal to other processes that they can attempt to access a critical section, whereas a mutex has to be unlocked by the same process/thread that locked it.\u003C/p>\n\u003Cp>threads.h includes 2 locking mechanisms that can be used in tandem: mutexes and condition variables. The mutex is a binary semaphore, flipping between 1 and 0 to determine whether a thread can or can’t access the section the mutex is guarding. The condition variables are used to tell threads to go to sleep when a certain event occurs, and to wake up when another event happens. And with just these 2 components, we can create a semaphore.\u003C/p>\n\u003Ch2 id=\"implementation\">Implementation\u003C/h2>\n\u003Cp>Our semaphore itself will have 3 variables.\u003C/p>\n\u003Col>\n\u003Cli>A counter, containing how many more threads are able to access the resource the semaphore is guarding\u003C/li>\n\u003Cli>A mutex, guarding access to the counter\u003C/li>\n\u003Cli>A conditional variable, used for the signaling of other threads that are using the semaphore.\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typedef\u003C/span>\u003Cspan style=\"color:#F97583\"> struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> semaphore {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  mtx_t\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mtx;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  cnd_t\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> cv;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#79B8FF\">sem_t\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The semaphore functions we will implement mirror the POSIX semaphore functions with slightly less complexity.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>sem_init\u003C/code> will initialize the semaphore\u003C/li>\n\u003Cli>\u003Ccode>sem_ post\u003C/code> will indicate the thread is done with the semaphore so other threads can attepmt to unlock it\u003C/li>\n\u003Cli>\u003Ccode>sem_wait\u003C/code> will request to gain access to the critical section through the semaphore, putting the thread to sleep if the semaphore is full\u003C/li>\n\u003Cli>\u003Ccode>sem_destroy\u003C/code> will de-allocate the semaphore\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ccode>sem_init\u003C/code> initializes the mutex and the conditional variable, as well as sets the counter to whatever is passed in the parameter.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> sem_init\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">sem_t\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#FFAB70\">sem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">unsigned\u003C/span>\u003Cspan style=\"color:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#FFAB70\"> value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (sem \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  mtx_init\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->mtx, mtx_plain);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  cnd_init\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->cv);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  sem->count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>sem_wait\u003C/code> attempts to access the counter variable by blocking on the mutex. Once it obtains the mutex, the thread will block on the condition variable if the counter variable is equal to zero, meaning that no more space for resources is available. The conditional variable will take care of unlocking the mutex while the thread is asleep, so that the thread does not block other threads.\u003C/p>\n\u003Cp>Once the thread wakes up and the counter is above zero, the thread will decrement the counter. It will unlock the mutex for the counter, and then return.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> sem_wait\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">sem_t\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#FFAB70\">sem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (sem \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  mtx_lock\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->mtx);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (sem->count \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    cnd_wait\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->cv, \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->mtx);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  sem->count\u003C/span>\u003Cspan style=\"color:#F97583\">--\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  mtx_unlock\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->mtx);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>sem_post\u003C/code> does the opposite of \u003Ccode>sem_wait\u003C/code>, locking the mutex and incrementing the counter. The conditional variable is then signaled, allowing another thread a chance at gaining access to the semaphore. The mutex is then unlocked and the function returns.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> sem_post\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">sem_t\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#FFAB70\">sem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (sem \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  mtx_lock\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->mtx);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  sem->count\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  cnd_signal\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->cv);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  mtx_unlock\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->mtx);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>sem_destroy\u003C/code> frees the mutex and the conditional variable such that no memory leaks will occur.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> sem_destroy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">sem_t\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#FFAB70\">sem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (sem \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  mtx_destroy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->mtx);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  cnd_destroy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem->cv);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"application\">Application\u003C/h2>\n\u003Cp>This sample code will attempt to give only VALUE_COUNT_MAX threads access to the critical section through the semaphore.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;stdio.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;unistd.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"semaphore.h\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#define\u003C/span>\u003Cspan style=\"color:#B392F0\"> VALUE_COUNT_MAX\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#define\u003C/span>\u003Cspan style=\"color:#B392F0\"> THREAD_COUNT\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">sem_t\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sem;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">void\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#FFAB70\">arg\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    (\u003C/span>\u003Cspan style=\"color:#F97583\">void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)arg;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    sem_wait\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Thread: is reading!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    sleep\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Thread: is exiting!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    sem_post\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">void\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    thrd_t\u003C/span>\u003Cspan style=\"color:#FFAB70\"> t\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    sem_init\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem, VALUE_COUNT_MAX);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Spawn new threads\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> THREAD_COUNT; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      thrd_create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#FFAB70\">t\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[i], run, \u003C/span>\u003Cspan style=\"color:#79B8FF\">NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> res;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> THREAD_COUNT; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      thrd_join\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">t\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[i], \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">res);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    sem_destroy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">sem);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>This has been a very brief guide on implementing basic semaphores in C11. POSIX semaphores have many other options that can be mirrored with the threads.h library. Any suggestions are appreciated, thank you for your time!\u003C/p>\n\u003Ch2 id=\"sources\">Sources\u003C/h2>\n\u003Cp>\u003Ca href=\"https://beej.us/guide/bgc/html/split/multithreading.html\">Beej’s C Programming guide\u003C/a> was very helpful for explaining the capabilities of the threads.h library.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/VladimirMarkelov/semaphore_c11\">This GitHub repository\u003C/a> was helpful for verifying my implementation.\u003C/p>",{"headings":69,"imagePaths":87,"frontmatter":55},[70,71,74,77,80,83,84],{"depth":29,"slug":30,"text":31},{"depth":29,"slug":72,"text":73},"requirements","Requirements",{"depth":29,"slug":75,"text":76},"units-of-multi-threading-a-primer","Units of Multi-threading: A Primer",{"depth":29,"slug":78,"text":79},"implementation","Implementation",{"depth":29,"slug":81,"text":82},"application","Application",{"depth":29,"slug":49,"text":50},{"depth":29,"slug":85,"text":86},"sources","Sources",[],"post-1.md"]